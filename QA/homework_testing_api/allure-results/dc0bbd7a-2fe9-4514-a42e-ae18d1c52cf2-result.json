{"name": "testing api with token for creating video with unvalid data", "status": "broken", "statusDetails": {"message": "json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)", "trace": "get_token = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6InRlc3RAbWFpbC5jb20iLCJpYXQiOjE3MDU1OTk4OTksImV4cCI6MTcwNTY4NjI5OX0.Kds-IOWR5mDnwAlYndsGCgZ6v4qHZTVy4E2W84rjVEg'\n\n    @allure.title(\"testing api with token for creating video with unvalid data\")\n    def test_create_video_with_unvalid_data(get_token):\n        video_data={\n            \"iddd\": 14,\n            \"titlde\": \"testvideoUpdated\",\n            \"category\": \"Rock\",\n            \"url\": \"https://www.youtube.com/embed/0bYDeZpIZvk?si=z8POfOgCnQxEn1Vq\"\n        }\n        headers = {\"Authorization\": f\"Bearer {get_token}\"}\n        response = requests.put(f\"{API_BASE_URL}/video/create\",headers=headers,json=video_data)\n>       assert response.json()[\"message\"] == \"Bad Request\"\n\ntest_api.py:77: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/lib/python3/dist-packages/requests/models.py:900: in json\n    return complexjson.loads(self.text, **kwargs)\n/usr/lib/python3.10/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/usr/lib/python3.10/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f2aa26c0f10>\ns = '<!DOCTYPE html>\\n<html lang=\"en\">\\n<head>\\n<meta charset=\"utf-8\">\\n<title>Error</title>\\n</head>\\n<body>\\n<pre>Cannot PUT /video/create</pre>\\n</body>\\n</html>\\n'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/usr/lib/python3.10/json/decoder.py:355: JSONDecodeError"}, "start": 1705599899799, "stop": 1705599899801, "uuid": "9a021043-8b5f-411c-bd83-b36139c12bf4", "historyId": "91f8ff93786894e67df6836f038f1301", "testCaseId": "91f8ff93786894e67df6836f038f1301", "fullName": "test_api#test_create_video_with_unvalid_data", "labels": [{"name": "suite", "value": "test_api"}, {"name": "host", "value": "mher-desktop"}, {"name": "thread", "value": "91400-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_api"}]}